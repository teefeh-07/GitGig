# GitGig - Web3 Job Board Smart Contract

GitGig is a decentralized job board platform built on Stacks blockchain, enabling secure and transparent Web3 job postings and applications with built-in payment escrow functionality.

## Features

- **Secure Job Posting**: Employers can post jobs with detailed descriptions and required skills
- **Built-in Payment Escrow**: Job payments are held in the contract until successful completion
- **Application Management**: Simple yet powerful application system with proposal submissions
- **Status Tracking**: Track job and application statuses throughout the hiring process
- **Skills Verification**: Support for listing and verifying required skills

## Smart Contract Functions

### For Employers

1. `post-job`: Post a new job with title, description, payment, and required skills
   ```clarity
   (post-job "Senior Solidity Developer" "We're looking for..." u1000000 u100 (list "Solidity" "DeFi"))
   ```

2. `accept-application`: Accept an applicant for a job
   ```clarity
   (accept-application u1 'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM)
   ```

3. `complete-job`: Mark a job as completed and release payment
   ```clarity
   (complete-job u1)
   ```

### For Job Seekers

1. `apply-for-job`: Submit an application with a proposal
   ```clarity
   (apply-for-job u1 "I'm interested in this position...")
   ```

### Read-Only Functions

1. `get-job`: Retrieve job details
2. `get-application`: View application details
3. `get-job-counter`: Get total number of jobs posted

## Data Structures

### Jobs Map
Stores job listings with the following information:
- Employer address
- Job title
- Description
- Payment amount
- Status (open/filled/completed)
- Deadline
- Required skills

### Applications Map
Tracks job applications with:
- Applicant address
- Proposal
- Status (pending/accepted/rejected)
- Timestamp

## Error Codes

- `u100`: Owner-only action
- `u101`: Job/Application not found
- `u102`: Invalid job status
- `u103`: Already applied
- `u104`: Insufficient funds

## Development

### Prerequisites

- [Clarinet](https://github.com/hirosystems/clarinet)
- [Stacks CLI](https://docs.stacks.co/references/stacks-cli)

### Setup

1. Clone the repository
```bash
git clone https://github.com/yourusername/gitgig.git
cd gitgig
```

2. Install dependencies
```bash
clarinet requirements
```

3. Run tests
```bash
clarinet test
```

### Deployment

1. Build the contract
```bash
clarinet build
```

2. Deploy to testnet/mainnet (requires Stacks CLI setup)
```bash
stx deploy_contract gitgig.clar
```

## Security Considerations

- Job payments are held in escrow until job completion
- Only job posters can accept applications and release payments
- Built-in checks prevent double applications
- Deadline enforcement for job listings
- Status tracking prevents invalid state transitions

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Contact

- Project Link: [https://github.com/yourusername/gitgig](https://github.com/yourusername/gitgig)
- Discord: [Join our community](https://discord.gg/gitgig)
- Twitter: [@GitGigHQ](https://twitter.com/GitGigHQ)